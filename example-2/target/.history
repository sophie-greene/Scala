;reload; set _root_.org.jetbrains.sbt.StructureKeys.sbtStructureOptions in Global := "download resolveClassifiers resolveSbtClassifiers" ;*/*:dumpStructureTo /private/var/folders/31/z7sbq6r90zl8kwc6qbn4v1pc0000gn/T/sbt-structure.xml; session clear-all
all {file:/Users/sophiegreene/Downloads/example-2/}root/products {file:/Users/sophiegreene/Downloads/example-2/}root/test:products
def sum(xs: List[Int]): Int = xs.aggregate(Set[Int]())(=+)
def and(x:Boolean, y:=>Boolean) = if (x) y else false 
def and(x:Boolean, y: =>Boolean) = if (x) y else false 
def and(x: Boolean, y: =>Boolean) = if (x) y else false 
all {file:/Users/sophiegreene/Downloads/example-2/}root/products {file:/Users/sophiegreene/Downloads/example-2/}root/test:products
def sum(xs: List[Int]): Int = if (!xs.iterator.hasNext) 0 else xs.iterator.next() + sum(xs)
def sum(xs: List[Int])= {       if (! xs.iterator.hasNext) 0 else xs.iterator.next () + sum (xs)     }
all {file:/Users/sophiegreene/Downloads/example-2/}root/products {file:/Users/sophiegreene/Downloads/example-2/}root/test:products
   def sum(xs: List[Int]) = Int       if (! xs.hasNext) 0       else xs.iterator.next () + sum(xs)
all {file:/Users/sophiegreene/Downloads/example-2/}root/products {file:/Users/sophiegreene/Downloads/example-2/}root/test:products
 def sum(xs: List[Int]) {       def iterSum(lst: Iterator[Int]) =Int       if (!lst.hasNext) 0       else lst.next + iterSum(lst)       iterSum(xs.iterator)     }
all {file:/Users/sophiegreene/Downloads/example-2/}root/products {file:/Users/sophiegreene/Downloads/example-2/}root/test:products
def x = List(1,2,0)
val x =List(1,2,0)
val x =(1,2,0)
   def sum(xs: List[Int]) {       def iterSum(it: Int): Int =         if (it==xs.length) xs.last          else (xs(it)+iterSum(it+1))     }
all {file:/Users/sophiegreene/Downloads/example-2/}root/products {file:/Users/sophiegreene/Downloads/example-2/}root/test:products
 def max(xs: List[Int]): Int = if (xs.length == 1) xs.head else  math.max(xs.head, max(xs.tail))
def max(xs: List[Int]): Int = if (xs.length == 1) xs.head else  math.max(xs.head, max(xs.tail))
all {file:/Users/sophiegreene/Downloads/example-2/}root/products {file:/Users/sophiegreene/Downloads/example-2/}root/test:products
